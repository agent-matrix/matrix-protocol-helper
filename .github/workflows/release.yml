# .github/workflows/release.yml
# This workflow creates a GitHub release and builds the application for macOS,
# Windows, and Linux when a new version tag (e.g., v1.0.0) is pushed.

name: Create Release

on:
  push:
    tags:
      - 'v*' # Trigger the workflow on version tags

jobs:
  # This job creates the initial GitHub Release.
  # The build jobs will then upload their artifacts to this release.
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ github.ref_name }}"
          body: "See the assets below for platform-specific installers."
          draft: false
          prerelease: false

  # This job builds the application for all target platforms.
  build-tauri:
    needs: create-release # Wait for the release to be created first
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Note: Assuming you are using pnpm as per your example.
      # If you use npm, you can replace the pnpm steps with `run: npm install`.
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev \
            build-essential \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      # This is the core step that builds and uploads the release assets.
      # The `tauri-action` automatically finds the correct artifacts for each
      # platform and attaches them to the release created in the previous job.
      - name: Build Application and Upload to Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
